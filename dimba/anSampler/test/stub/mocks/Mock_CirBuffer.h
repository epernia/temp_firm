/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_CIRBUFFER_H
#define _MOCK_CIRBUFFER_H

#include "CirBuffer.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void Mock_CirBuffer_Init(void);
void Mock_CirBuffer_Destroy(void);
void Mock_CirBuffer_Verify(void);




#define cirBuffer_init_IgnoreAndReturn(cmock_retval) cirBuffer_init_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void cirBuffer_init_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define cirBuffer_init_ExpectAndReturn(me, sto, elemSize, nElem, cmock_retval) cirBuffer_init_CMockExpectAndReturn(__LINE__, me, sto, elemSize, nElem, cmock_retval)
void cirBuffer_init_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, CirBuffer* const me, unsigned char* sto, int elemSize, int nElem, int cmock_to_return);
typedef int (* CMOCK_cirBuffer_init_CALLBACK)(CirBuffer* const me, unsigned char* sto, int elemSize, int nElem, int cmock_num_calls);
void cirBuffer_init_StubWithCallback(CMOCK_cirBuffer_init_CALLBACK Callback);
#define cirBuffer_init_IgnoreArg_me() cirBuffer_init_CMockIgnoreArg_me(__LINE__)
void cirBuffer_init_CMockIgnoreArg_me(UNITY_LINE_TYPE cmock_line);
#define cirBuffer_init_IgnoreArg_sto() cirBuffer_init_CMockIgnoreArg_sto(__LINE__)
void cirBuffer_init_CMockIgnoreArg_sto(UNITY_LINE_TYPE cmock_line);
#define cirBuffer_init_IgnoreArg_elemSize() cirBuffer_init_CMockIgnoreArg_elemSize(__LINE__)
void cirBuffer_init_CMockIgnoreArg_elemSize(UNITY_LINE_TYPE cmock_line);
#define cirBuffer_init_IgnoreArg_nElem() cirBuffer_init_CMockIgnoreArg_nElem(__LINE__)
void cirBuffer_init_CMockIgnoreArg_nElem(UNITY_LINE_TYPE cmock_line);
#define cirBuffer_put_IgnoreAndReturn(cmock_retval) cirBuffer_put_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void cirBuffer_put_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define cirBuffer_put_ExpectAndReturn(me, elem, cmock_retval) cirBuffer_put_CMockExpectAndReturn(__LINE__, me, elem, cmock_retval)
void cirBuffer_put_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, CirBuffer* const me, unsigned char* elem, int cmock_to_return);
typedef int (* CMOCK_cirBuffer_put_CALLBACK)(CirBuffer* const me, unsigned char* elem, int cmock_num_calls);
void cirBuffer_put_StubWithCallback(CMOCK_cirBuffer_put_CALLBACK Callback);
#define cirBuffer_put_IgnoreArg_me() cirBuffer_put_CMockIgnoreArg_me(__LINE__)
void cirBuffer_put_CMockIgnoreArg_me(UNITY_LINE_TYPE cmock_line);
#define cirBuffer_put_IgnoreArg_elem() cirBuffer_put_CMockIgnoreArg_elem(__LINE__)
void cirBuffer_put_CMockIgnoreArg_elem(UNITY_LINE_TYPE cmock_line);
#define cirBuffer_get_IgnoreAndReturn(cmock_retval) cirBuffer_get_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void cirBuffer_get_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define cirBuffer_get_ExpectAndReturn(me, elem, cmock_retval) cirBuffer_get_CMockExpectAndReturn(__LINE__, me, elem, cmock_retval)
void cirBuffer_get_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, CirBuffer* const me, unsigned char* elem, int cmock_to_return);
typedef int (* CMOCK_cirBuffer_get_CALLBACK)(CirBuffer* const me, unsigned char* elem, int cmock_num_calls);
void cirBuffer_get_StubWithCallback(CMOCK_cirBuffer_get_CALLBACK Callback);
#define cirBuffer_get_IgnoreArg_me() cirBuffer_get_CMockIgnoreArg_me(__LINE__)
void cirBuffer_get_CMockIgnoreArg_me(UNITY_LINE_TYPE cmock_line);
#define cirBuffer_get_IgnoreArg_elem() cirBuffer_get_CMockIgnoreArg_elem(__LINE__)
void cirBuffer_get_CMockIgnoreArg_elem(UNITY_LINE_TYPE cmock_line);
#define cirBuffer_getBlock_IgnoreAndReturn(cmock_retval) cirBuffer_getBlock_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void cirBuffer_getBlock_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define cirBuffer_getBlock_ExpectAndReturn(me, destBlock, nElem, cmock_retval) cirBuffer_getBlock_CMockExpectAndReturn(__LINE__, me, destBlock, nElem, cmock_retval)
void cirBuffer_getBlock_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, CirBuffer* const me, unsigned char* destBlock, int nElem, int cmock_to_return);
typedef int (* CMOCK_cirBuffer_getBlock_CALLBACK)(CirBuffer* const me, unsigned char* destBlock, int nElem, int cmock_num_calls);
void cirBuffer_getBlock_StubWithCallback(CMOCK_cirBuffer_getBlock_CALLBACK Callback);
#define cirBuffer_getBlock_IgnoreArg_me() cirBuffer_getBlock_CMockIgnoreArg_me(__LINE__)
void cirBuffer_getBlock_CMockIgnoreArg_me(UNITY_LINE_TYPE cmock_line);
#define cirBuffer_getBlock_IgnoreArg_destBlock() cirBuffer_getBlock_CMockIgnoreArg_destBlock(__LINE__)
void cirBuffer_getBlock_CMockIgnoreArg_destBlock(UNITY_LINE_TYPE cmock_line);
#define cirBuffer_getBlock_IgnoreArg_nElem() cirBuffer_getBlock_CMockIgnoreArg_nElem(__LINE__)
void cirBuffer_getBlock_CMockIgnoreArg_nElem(UNITY_LINE_TYPE cmock_line);
#define cirBuffer_getNumElem_IgnoreAndReturn(cmock_retval) cirBuffer_getNumElem_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void cirBuffer_getNumElem_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define cirBuffer_getNumElem_ExpectAndReturn(me, cmock_retval) cirBuffer_getNumElem_CMockExpectAndReturn(__LINE__, me, cmock_retval)
void cirBuffer_getNumElem_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, CirBuffer* const me, int cmock_to_return);
typedef int (* CMOCK_cirBuffer_getNumElem_CALLBACK)(CirBuffer* const me, int cmock_num_calls);
void cirBuffer_getNumElem_StubWithCallback(CMOCK_cirBuffer_getNumElem_CALLBACK Callback);
#define cirBuffer_getNumElem_IgnoreArg_me() cirBuffer_getNumElem_CMockIgnoreArg_me(__LINE__)
void cirBuffer_getNumElem_CMockIgnoreArg_me(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
